@page "/atenciones/edit"
@using Microsoft.EntityFrameworkCore
@using TallerGestion.Models
@inject IDbContextFactory<TallerGestion.Data.Persistence.GestionContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Edit</PageTitle>

<h1>Edit</h1>

<h2>Atenciones</h2>
<hr />
@if (Atenciones is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="row">
        <div class="col-md-4">
            <EditForm method="post" Model="Atenciones" OnValidSubmit="UpdateAtenciones" FormName="edit" Enhance>
                <DataAnnotationsValidator />
                <ValidationSummary />
                <input type="hidden" name="Atenciones.AtencionId" value="@Atenciones.AtencionId" />
                <div class="mb-3">
                    <label for="clienteid" class="form-label">ClienteId:</label>
                    <InputNumber id="clienteid" @bind-Value="Atenciones.ClienteId" class="form-control" />
                    <ValidationMessage For="() => Atenciones.ClienteId" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="oficinaid" class="form-label">OficinaId:</label>
                    <InputNumber id="oficinaid" @bind-Value="Atenciones.OficinaId" class="form-control" />
                    <ValidationMessage For="() => Atenciones.OficinaId" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="puestoid" class="form-label">PuestoId:</label>
                    <InputNumber id="puestoid" @bind-Value="Atenciones.PuestoId" class="form-control" />
                    <ValidationMessage For="() => Atenciones.PuestoId" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="operarioid" class="form-label">OperarioId:</label>
                    <InputNumber id="operarioid" @bind-Value="Atenciones.OperarioId" class="form-control" />
                    <ValidationMessage For="() => Atenciones.OperarioId" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="tramiteid" class="form-label">TramiteId:</label>
                    <InputNumber id="tramiteid" @bind-Value="Atenciones.TramiteId" class="form-control" />
                    <ValidationMessage For="() => Atenciones.TramiteId" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="fechahorallegada" class="form-label">FechaHoraLlegada:</label>
                    <InputDate id="fechahorallegada" @bind-Value="Atenciones.FechaHoraLlegada" class="form-control" />
                    <ValidationMessage For="() => Atenciones.FechaHoraLlegada" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="fechahoraatencion" class="form-label">FechaHoraAtencion:</label>
                    <InputDate id="fechahoraatencion" @bind-Value="Atenciones.FechaHoraAtencion" class="form-control" />
                    <ValidationMessage For="() => Atenciones.FechaHoraAtencion" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="fechahorafinalizacion" class="form-label">FechaHoraFinalizacion:</label>
                    <InputDate id="fechahorafinalizacion" @bind-Value="Atenciones.FechaHoraFinalizacion" class="form-control" />
                    <ValidationMessage For="() => Atenciones.FechaHoraFinalizacion" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="estado" class="form-label">Estado:</label>
                    <InputText id="estado" @bind-Value="Atenciones.Estado" class="form-control" />
                    <ValidationMessage For="() => Atenciones.Estado" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="segundallamado" class="form-label">SegundaLlamado:</label>
                    <InputNumber id="segundallamado" @bind-Value="Atenciones.SegundaLlamado" class="form-control" />
                    <ValidationMessage For="() => Atenciones.SegundaLlamado" class="text-danger" />
                </div>
                <button type="submit" class="btn btn-primary">Save</button>
            </EditForm>
        </div>
    </div>
}

<div>
    <a href="/atenciones">Back to List</a>
</div>

@code {
    [SupplyParameterFromQuery]
    private int AtencionId { get; set; }

    [SupplyParameterFromForm]
    private Atenciones? Atenciones { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        Atenciones ??= await context.Atenciones.FirstOrDefaultAsync(m => m.AtencionId == AtencionId);

        if (Atenciones is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    // To protect from overposting attacks, enable the specific properties you want to bind to.
    // For more information, see https://learn.microsoft.com/aspnet/core/blazor/forms/#mitigate-overposting-attacks.
    private async Task UpdateAtenciones()
    {
        using var context = DbFactory.CreateDbContext();
        context.Attach(Atenciones!).State = EntityState.Modified;

        try
        {
            await context.SaveChangesAsync();
        }
        catch (DbUpdateConcurrencyException)
        {
            if (!AtencionesExists(Atenciones!.AtencionId))
            {
                NavigationManager.NavigateTo("notfound");
            }
            else
            {
                throw;
            }
        }

        NavigationManager.NavigateTo("/atenciones");
    }

    private bool AtencionesExists(int atencionid)
    {
        using var context = DbFactory.CreateDbContext();
        return context.Atenciones.Any(e => e.AtencionId == atencionid);
    }
}
