@page "/atenciones/details"
@using Microsoft.EntityFrameworkCore
@using TallerGestion.Models
@inject IDbContextFactory<TallerGestion.Data.Persistence.GestionContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Details</PageTitle>

<h1>Details</h1>

<div>
    <h2>Atenciones</h2>
    <hr />
    @if (atenciones is null)
    {
        <p><em>Loading...</em></p>
    }
    else {
        <dl class="row">
            <dt class="col-sm-2">ClienteId</dt>
            <dd class="col-sm-10">@atenciones.ClienteId</dd>
            <dt class="col-sm-2">OficinaId</dt>
            <dd class="col-sm-10">@atenciones.OficinaId</dd>
            <dt class="col-sm-2">PuestoId</dt>
            <dd class="col-sm-10">@atenciones.PuestoId</dd>
            <dt class="col-sm-2">OperarioId</dt>
            <dd class="col-sm-10">@atenciones.OperarioId</dd>
            <dt class="col-sm-2">TramiteId</dt>
            <dd class="col-sm-10">@atenciones.TramiteId</dd>
            <dt class="col-sm-2">FechaHoraLlegada</dt>
            <dd class="col-sm-10">@atenciones.FechaHoraLlegada</dd>
            <dt class="col-sm-2">FechaHoraAtencion</dt>
            <dd class="col-sm-10">@atenciones.FechaHoraAtencion</dd>
            <dt class="col-sm-2">FechaHoraFinalizacion</dt>
            <dd class="col-sm-10">@atenciones.FechaHoraFinalizacion</dd>
            <dt class="col-sm-2">Estado</dt>
            <dd class="col-sm-10">@atenciones.Estado</dd>
            <dt class="col-sm-2">SegundaLlamado</dt>
            <dd class="col-sm-10">@atenciones.SegundaLlamado</dd>
        </dl>
        <div>
            <a href="@($"/atenciones/edit?atencionid={atenciones.AtencionId}")">Edit</a> |
            <a href="@($"/atenciones")">Back to List</a>
        </div>
    }
</div>

@code {
    private Atenciones? atenciones;

    [SupplyParameterFromQuery]
    private int AtencionId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            using var context = DbFactory.CreateDbContext();

            // Intenta realizar una operación simple para verificar la conexión
            bool canConnect = await context.Database.CanConnectAsync();
            if (!canConnect)
            {
                Console.WriteLine("No se puede conectar a la base de datos.");
                return;
            }

            atenciones = await context.Atenciones.FirstOrDefaultAsync(m => m.AtencionId == AtencionId);
            if (atenciones is null)
            {
                Console.WriteLine($"No se encontró ninguna atención con ID: {AtencionId}");
                NavigationManager.NavigateTo("notfound");
            }
            else
            {
                Console.WriteLine($"Se encontró una atención con ID: {AtencionId}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al conectar con la base de datos: {ex.Message}");
            // Opcionalmente, puedes redirigir a una página de error aquí
        }
    }
}
