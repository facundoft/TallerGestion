@page "/monitor"
@using TallerGestion.Pages.Components
@using Microsoft.EntityFrameworkCore
@using TallerGestion.Models
@using TallerGestion.Data.Persistence
@using Microsoft.AspNetCore.SignalR.Client
@using TallerGestion.Hubs
@using System.Threading
@implements IAsyncDisposable
@inject IDbContextFactory<TallerGestion.Data.Persistence.GestionContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Monitor de Atenciones</PageTitle>

<div class="monitor-container">
    <div class="header">
        <h1>Monitor de Atenciones</h1>
        <select class="office-select" @onchange="@(e => OnOficinaChanged(e))">
            <option value="">-- Selecciona una Oficina --</option>
            @foreach (var oficina in oficinas)
            {
                <option value="@oficina.OficinaId">@oficina.Nombre</option>
            }
        </select>
    </div>

    <div class="monitor-panels">
        <!-- Panel de Espera -->
        <div class="panel waiting-panel">
            <div class="panel-header">
                <h2>EN ESPERA</h2>
            </div>
            <div class="tickets-container">
                @if (atencionesEspera != null)
                {
                    @foreach (var atencion in atencionesEspera)
                    {
                        <div class="ticket waiting">
                            <span class="ticket-number">@atencion.AtencionId</span>
                        </div>
                    }
                }
            </div>
        </div>

        <!-- Panel de Llamados -->
        <div class="panel called-panel">
            <div class="panel-header">
                <h2>LLAMANDO</h2>
            </div>
            <div class="tickets-container">
                @if (atencionesLlamando != null)
                {
                    @foreach (var atencion in atencionesLlamando)
                    {
                        <div class="ticket @(atencion.Estado == "En Progreso"
                            ? "in-progress"
                            : $"called {(atencion.SegundaLlamado == 2 ? "second-call" : "")}")">
                            <div class="ticket-info">
                                <span class="ticket-number">@atencion.AtencionId</span>
                                <span class="desk-number">PUESTO @atencion.PuestoId</span>
                            </div>
                        </div>
                    }
                }
            </div>
        </div>

        <!-- Panel de Atendidos -->
        <div class="panel attended-panel">
            <div class="panel-header">
                <h2>ATENDIDOS</h2>
            </div>
            <div class="tickets-container">
                @if (atencionesAtendidas != null)
                {
                    @foreach (var atencion in atencionesAtendidas)
                    {
                        <div class="ticket attended">
                            <div class="ticket-info">
                                <span class="ticket-number">@atencion.AtencionId</span>
                                <span class="desk-number">PUESTO @atencion.PuestoId</span>
                            </div>
                        </div>
                    }
                }
            </div>
        </div>
    </div>
</div>

<style>
    .monitor-container {
        padding: 20px;
        background-color: #1a1a1a;
        min-height: 100vh;
        color: white;
    }

    .header {
        text-align: center;
        margin-bottom: 30px;
    }

        .header h1 {
            font-size: 2.5rem;
            margin-bottom: 20px;
            color: #fff;
        }

    .office-select {
        padding: 10px;
        font-size: 1.2rem;
        border-radius: 5px;
        background-color: #fff;
        color: #000;
        width: 300px;
        max-width: 100%;
    }

    .monitor-panels {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
        gap: 20px;
        margin: 0 auto;
        max-width: 1400px;
    }

    .panel {
        background-color: #2a2a2a;
        border-radius: 10px;
        overflow: hidden;
    }

    .panel-header {
        background-color: #333;
        padding: 15px;
        text-align: center;
    }

        .panel-header h2 {
            margin: 0;
            font-size: 1.8rem;
            font-weight: bold;
        }

    .tickets-container {
        padding: 20px;
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(150px, 1fr));
        gap: 15px;
    }

    .ticket {
        padding: 15px;
        border-radius: 8px;
        text-align: center;
        animation: fadeIn 0.5s ease-in;
    }

    .waiting {
        background-color: #2c3e50;
        border: 2px solid #3498db;
    }

    .called {
        background-color: #27ae60;
        border: 2px solid #2ecc71;
    }

    .in-progress {
        background-color: #f39c12;
        border: 2px solid #e67e22;
        color: white;
    }

    .attended {
        background-color: #8e44ad;
        border: 2px solid #9b59b6;
        color: white;
    }

    .second-call {
        background-color: #d35400;
        border: 2px solid #e67e22;
        animation: pulse 2s infinite;
    }

    .ticket-number {
        font-size: 2.5rem;
        font-weight: bold;
        display: block;
        margin-bottom: 5px;
    }

    .desk-number {
        font-size: 1.2rem;
        display: block;
        color: #fff;
    }

    @@keyframes fadeIn {
        from {
            opacity: 0;
            transform: translateY(20px);
        }

        to {
            opacity: 1;
            transform: translateY(0);
        }
    }

    @@keyframes pulse {
        0% {
            transform: scale(1);
        }

        50% {
            transform: scale(1.05);
        }

        100% {
            transform: scale(1);
        }
    }

    @@media (max-width: 768px) {
        .monitor-panels {
            grid-template-columns: 1fr;
        }

        .tickets-container {
            grid-template-columns: repeat(auto-fill, minmax(120px, 1fr));
        }

        .ticket-number {
            font-size: 2rem;
        }

        .desk-number {
            font-size: 1rem;
        }
    }
</style>

@code {
    private GestionContext context = default!;
    private List<Oficinascomerciales> oficinas = new();
    private List<Atenciones>? atencionesEspera;
    private List<Atenciones>? atencionesLlamando;
    private List<Atenciones>? atencionesAtendidas;
    private int? selectedOficinaId;
    private HubConnection? hubConnection;
    private Timer? updateTimer;

    protected override async Task OnInitializedAsync()
    {
        context = DbFactory.CreateDbContext();
        oficinas = await context.Oficinascomerciales.ToListAsync();
        await ConfigureSignalR();

        updateTimer = new Timer(async _ =>
        {
            await ActualizarAtenciones();
            await InvokeAsync(StateHasChanged);
        }, null, TimeSpan.Zero, TimeSpan.FromSeconds(1));
    }

    private async Task ConfigureSignalR()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/atencionHub"))
            .WithAutomaticReconnect()
            .Build();

        hubConnection.On<int>("NuevaAtencion", async (_) =>
        {
            await ActualizarAtenciones();
            await InvokeAsync(StateHasChanged);
        });

        hubConnection.On<int>("AtencionActualizada", async (_) =>
        {
            await ActualizarAtenciones();
            await InvokeAsync(StateHasChanged);
        });

        try
        {
            await hubConnection.StartAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al iniciar SignalR: {ex.Message}");
        }
    }

    private async Task OnOficinaChanged(ChangeEventArgs e)
    {
        selectedOficinaId = int.TryParse(e.Value?.ToString(), out var id) ? id : (int?)null;
        await ActualizarAtenciones();
    }

    private async Task ActualizarAtenciones()
    {
        if (selectedOficinaId.HasValue)
        {
            try
            {
                using var newContext = DbFactory.CreateDbContext();

                // Obtener atenciones en espera
                atencionesEspera = await newContext.Atenciones
                    .Where(a => a.OficinaId == selectedOficinaId.Value)
                    .Where(a => a.Estado == "En Espera")
                    .OrderBy(a => a.FechaHoraLlegada)
                    .ToListAsync();

                // Obtener atenciones siendo llamadas o en progreso
                atencionesLlamando = await newContext.Atenciones
                    .Where(a => a.OficinaId == selectedOficinaId.Value)
                    .Where(a => a.Estado == "Llamando")
                    .OrderByDescending(a => a.FechaHoraLlegada)
                    .ToListAsync();

                // Obtener atendidos
                atencionesAtendidas = await newContext.Atenciones
                    .Where(a => a.OficinaId == selectedOficinaId.Value)
                    .Where(a => a.Estado == "En Progreso")
                    .OrderByDescending(a => a.FechaHoraAtencion)
                    .Take(10) // últimas 10 atenciones
                    .ToListAsync();

                await InvokeAsync(StateHasChanged);
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error al actualizar atenciones: {ex.Message}");
            }
        }
        else
        {
            atencionesEspera = null;
            atencionesLlamando = null;
            atencionesAtendidas = null;
            await InvokeAsync(StateHasChanged);
        }
    }

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
        if (updateTimer is not null)
        {
            await updateTimer.DisposeAsync();
        }
        await context.DisposeAsync();
    }
}