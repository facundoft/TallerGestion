@page "/monitor"
@using TallerGestion.Pages.Components
@using Microsoft.EntityFrameworkCore
@using TallerGestion.Models
@using TallerGestion.Data.Persistence
@using Microsoft.AspNetCore.SignalR.Client
@using TallerGestion.Hubs
@using System.Threading
@implements IAsyncDisposable
@inject IDbContextFactory<TallerGestion.Data.Persistence.GestionContext> DbFactory
@inject NavigationManager NavigationManager
@inject OficinasComercialService OficinasComercialService
<PageTitle>Monitor de Atenciones</PageTitle>

<div class="monitor-container">
    <div class="header">
        <h1>Monitor de Atenciones</h1>
    </div>

    <div class="monitor-panels">
        <!-- Panel de Espera -->
        <div class="panel waiting-panel">
            <div class="panel-header">
                <h2>EN ESPERA</h2>
            </div>
            <div class="tickets-container">
                @if (atencionesEspera != null)
                {
                    @foreach (var atencion in atencionesEspera)
                    {
                        <div class="ticket waiting">
                            <span class="ticket-number">@atencion.AtencionId</span>
                        </div>
                    }
                }
            </div>
        </div>

        <!-- Panel de Llamados -->
        <div class="panel called-panel">
            <div class="panel-header">
                <h2>LLAMANDO</h2>
            </div>
            <div class="tickets-container">
                @if (atencionesLlamando != null)
                {
                    @foreach (var atencion in atencionesLlamando)
                    {
                        <div class="ticket @(atencion.Estado == "En Progreso"
                            ? "in-progress"
                            : $"called {(atencion.SegundaLlamado == 2 ? "second-call" : "")}")">
                            <div class="ticket-info">
                                <span class="ticket-number">@atencion.AtencionId</span>
                                <span class="desk-number">PUESTO @atencion.Puesto.NumeroPuesto</span>
                            </div>
                        </div>
                    }
                }
            </div>
        </div>

        <!-- Panel de Atendidos -->
        <div class="panel attended-panel">
            <div class="panel-header">
                <h2>ATENDIDOS</h2>
            </div>
            <div class="tickets-container">
                @if (atencionesAtendidas != null)
                {
                    @foreach (var atencion in atencionesAtendidas)
                    {
                        <div class="ticket attended">
                            <div class="ticket-info">
                                <span class="ticket-number">@atencion.AtencionId</span>
                                <span class="desk-number">PUESTO @atencion.Puesto.NumeroPuesto</span>
                            </div>
                        </div>
                    }
                }
            </div>
        </div>
    </div>
</div>

@code {
    private GestionContext context = default!;
    private List<Oficinascomerciales> oficinas = new();
    private List<Atenciones>? atencionesEspera;
    private List<Atenciones>? atencionesLlamando;
    private List<Atenciones>? atencionesAtendidas;
    private int? selectedOficinaId;
    private HubConnection? hubConnection;
    private Timer? updateTimer;

    protected override async Task OnInitializedAsync()
    {
        context = DbFactory.CreateDbContext();
        selectedOficinaId = OficinasComercialService.OficinaActual.OficinaId;
        await ActualizarAtenciones();
        await ConfigureSignalR();
        updateTimer = new Timer(async _ =>
        {
            await ActualizarAtenciones();
            await InvokeAsync(StateHasChanged);
        }, null, TimeSpan.Zero, TimeSpan.FromSeconds(1));
    }

    private async Task ConfigureSignalR()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/atencionHub"))
            .WithAutomaticReconnect()
            .Build();

        hubConnection.On<int>("NuevaAtencion", async (_) =>
        {
            await ActualizarAtenciones();
            await InvokeAsync(StateHasChanged);
        });

        hubConnection.On<int>("AtencionActualizada", async (_) =>
        {
            await ActualizarAtenciones();
            await InvokeAsync(StateHasChanged);
        });

        try
        {
            await hubConnection.StartAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al iniciar SignalR: {ex.Message}");
        }
    }
    

    private async Task ActualizarAtenciones()
    {
        if (selectedOficinaId.HasValue)
        {
            try
            {
                using var newContext = DbFactory.CreateDbContext();

                // Obtener atenciones en espera
                atencionesEspera = await newContext.Atenciones
                    .Where(a => a.OficinaId == selectedOficinaId.Value)
                    .Where(a => a.Estado == "En Espera")
                    .OrderBy(a => a.FechaHoraLlegada)
                    .ToListAsync();

                // Obtener atenciones siendo llamadas o en progreso
                atencionesLlamando = await newContext.Atenciones
                    .Where(a => a.OficinaId == selectedOficinaId.Value)
                    .Where(a => a.Estado == "Llamando")
                    .Include(a=>a.Puesto)

                    .OrderByDescending(a => a.FechaHoraLlegada)
                    .ToListAsync();

                // Obtener atendidos
                atencionesAtendidas = await newContext.Atenciones
                    .Where(a => a.OficinaId == selectedOficinaId.Value)
                    .Where(a => a.Estado == "En Progreso")
                    .OrderByDescending(a => a.FechaHoraAtencion)
                    .Include(a=>a.Puesto)
                    .Take(10) // últimas 10 atenciones
                    .ToListAsync();

                await InvokeAsync(StateHasChanged);
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error al actualizar atenciones: {ex.Message}");
            }
        }
        else
        {
            atencionesEspera = null;
            atencionesLlamando = null;
            atencionesAtendidas = null;
            await InvokeAsync(StateHasChanged);
        }
    }

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
        if (updateTimer is not null)
        {
            await updateTimer.DisposeAsync();
        }
        await context.DisposeAsync();
    }
}