@page "/admin"
@using TallerGestion.Models
@using TallerGestion.Data
@using TallerGestion.Data.Persistence
@inject OficinasComercialService OficinasService
<h3>Administrar Oficinas y Puestos de Atención</h3>

<h4>Info oficina</h4>
<select @onchange="MostrarDetallesOficina">
    <option value="">Seleccione una Oficina</option>
    @foreach (var oficina in oficinas)
    {
        <option value="@oficina.OficinaId">@oficina.Nombre</option>
    }
</select>
<p>ID: @oficinaSeleccionada?.OficinaId</p>
<p>Nombre:  @oficinaSeleccionada?.Nombre</p>
<p>Dirección:  @oficinaSeleccionada?.Direccion</p>
<p>Ciudad: @oficinaSeleccionada?.Ciudad </p>

<h4>Alta de Oficina</h4>
<input @bind="nuevaOficina.Nombre" placeholder="Nombre" />
<input @bind="nuevaOficina.Direccion" placeholder="Dirección" />
<input @bind="nuevaOficina.Ciudad" placeholder="Ciudad" />
<button @onclick="CrearOficina">Crear Oficina</button>

<h4>Borrar Oficina</h4>
<select @bind="deleteOficinaID" >
    <option value="">Seleccione una Oficina</option>
    @foreach (var oficina in oficinas)
    {
        <option value="@oficina.OficinaId">@oficina.Nombre</option>
    }
</select>
<button @onclick="BorrarOficina">Borrar Oficina</button>



@code {

    private int deleteOficinaID, puestoID, oficinaID;
    private Oficinascomerciales oficinaSeleccionada;
    private Oficinascomerciales nuevaOficina = new Oficinascomerciales();
    private List<Oficinascomerciales> oficinas = new();
    private List<Puestosatencion> puestos = new();

    protected override async Task OnInitializedAsync()
    {
        oficinas = await OficinasService.GetAllOficinasAsync();
    }

    private async Task MostrarDetallesOficina(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value.ToString(), out int id))
        {
            oficinaID = id;
            foreach (var oficina in oficinas)
            {
                if (oficina.OficinaId == id)
                {
                    oficinaSeleccionada = oficina;
                    break;
                }
            }
        }
    }
    private async Task CrearOficina()
    {
        await OficinasService.AddOficinaAsync(nuevaOficina);
        nuevaOficina = new Oficinascomerciales(); // Resetear el formulario
        oficinas = await OficinasService.GetAllOficinasAsync(); // Actualizar la lista de oficinas
    }

    private async Task BorrarOficina()
    {
        await OficinasService.DeleteOficinaAsync(deleteOficinaID);
        oficinas = await OficinasService.GetAllOficinasAsync(); // Actualizar la lista de oficinas
    }

}
