@page "/PuestosRegistro"
@using TallerGestion.Models
@using TallerGestion.Data
@using TallerGestion.Data.Persistence
@using Microsoft.AspNetCore.SignalR.Client
@inject AtencionesService atencionservice
@inject OficinasComercialService OficinasService
@inject NavigationManager NavigationManager


<h3>Puestos de Registro</h3>

<form id="cedulaForm" @onsubmit="HandleSubmit">


    <div class="form-group">
        <label for="cedula">Cédula:</label>
        <input type="text" class="form-control" id="cedula" @bind="cedula" required placeholder="Ingrese su cédula">
    </div>

    <div class="form-group">
        <label for="tramite">Trámite:</label>
        <select id="tramite" class="form-control" @bind="selectedTramiteId" required>
            <option value="">Seleccione un trámite</option>
            @foreach (var tramite in tramitesDisponibles)
            {
                <option value="@tramite.TramiteId">@tramite.DescripcionTramite</option>
            }
        </select>
    </div>

    <button type="submit" class="btn btn-primary">Enviar</button>
</form>

@if (!string.IsNullOrEmpty(message))
{
    <div class="alert alert-info mt-3">@message</div>

}



@code {
    private string cedula;
    private string message;
    private string estado;
    private int selectedTramiteId;
    private List<Tramite> tramitesDisponibles = new List<Tramite>();
    private List<Oficinascomerciales> oficinas = new();
    private int selectedOficinaId;
    private HubConnection? hubConnection;

    protected override async Task OnInitializedAsync()
    {

        selectedOficinaId = OficinasComercialService.OficinaActual.OficinaId;
        // Configurar la conexión SignalR
        hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/atencionHub"))
            .WithAutomaticReconnect()
            .Build();

        try
        {
            await hubConnection.StartAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al iniciar SignalR: {ex.Message}");
        }

        // Cargar los datos iniciales
        tramitesDisponibles = await atencionservice.ObtenerTramitesAsync();
        oficinas = await OficinasService.GetAllOficinasAsync();
    }

    private async Task HandleSubmit()
    {
        if (IsValidCedula(cedula) && selectedTramiteId != 0 && selectedOficinaId != 0)
        {
            var clienteExistente = await atencionservice.ObtenerClientePorCedulaAsync(cedula);
            Clientes cliente;

            if (clienteExistente != null)
            {
                cliente = clienteExistente;
            }
            else
            {
                cliente = new Clientes { CedulaIdentidad = cedula };
                await atencionservice.CrearClienteAsync(cliente);
            }

            estado = await atencionservice.ObtenerEstadoAtencionPorCedulaAsync(cliente.CedulaIdentidad);

            if (string.IsNullOrEmpty(estado) || !estado.Equals("En Espera", StringComparison.OrdinalIgnoreCase))
            {
                var atencion = new Atenciones(
                    cliente.ClienteId,
                    selectedOficinaId,
                    null,
                    null,
                    selectedTramiteId,
                    DateTime.Now,
                    null,
                    null,
                    "En Espera",
                    0
                );
                try
                {

                    int numero = await atencionservice.CrearNuevaAtencionAsync(atencion);
                    message = "Se ha registrado la atención correctamente, su numero es: " + numero;
                    if (numero == -1){
                        message = "Error al registrar la atención";
                    }
                }
                catch (Exception e)
                {
                    message = "Error al registrar la atención";
                }

                // Asegúrate de que hubConnection está activo antes de enviar
                if (hubConnection?.State == HubConnectionState.Connected)
                {
                    try
                    {
                        await hubConnection.SendAsync("NotificarNuevaAtencion", selectedOficinaId);
                    }
                    catch (Exception ex)
                    {
                        Console.WriteLine($"Error al notificar nueva atención: {ex.Message}");
                        message = "Se registró la atención pero hubo un error en la notificación";
                    }
                }
                else
                {
                    message = "Se registró la atención pero la conexión SignalR no está activa";
                    // Intentar reconectar
                    try
                    {
                        await hubConnection?.StartAsync();
                    }
                    catch { }
                }
            }
            else
            {
                message = "Cliente sigue en espera.";
            }
        }
        else
        {
            message = "Cédula, trámite u oficina inválidos. Inténtalo de nuevo.";
        }
    }

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }

    private bool IsValidCedula(string cedula)
    {
        // Simple cedula validation (8 digits)
        return cedula.Length == 8 && cedula.All(char.IsDigit);
    }
}
